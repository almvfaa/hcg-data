services:
  # Servicio del Backend (FastAPI)
  - type: web
    name: hcg-backend
    env: docker
    repo: https://github.com/almvfaa/hcg-data.git
    dockerfilePath: ./backend/Dockerfile
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: inventory_db_iomh # Asegúrate de que este es el nombre de tu servicio de BD
          property: connectionString
      - key: SECRET_KEY
        generateValue: true # Render generará un valor seguro
      - key: ALGORITHM
        value: HS256
      - key: ACCESS_TOKEN_EXPIRE_MINUTES
        value: 120
      - key: BACKEND_CORS_ORIGINS
        # Construimos la URL del frontend manualmente. Render usa el nombre del servicio.
        value: "https://hcg-frontend.onrender.com"

  # Frontend Next.js
  - type: web
    name: hcg-frontend
    env: docker
    repo: https://github.com/almvfaa/hcg-data.git
    dockerfilePath: ./frontend/Dockerfile
    # Pasa la variable al Dockerfile durante la construcción
    dockerBuildArgs:
      NEXT_PUBLIC_API_URL: "https://hcg-backend.onrender.com"
    envVars:
      - key: NEXT_PUBLIC_API_URL
        value: "https://hcg-backend.onrender.com"

jobs:
  # Job para las migraciones de Alembic
  - type: job
    name: hcg-db-migrator
    # El job usa la misma imagen de Docker que el backend
    dockerfilePath: ./backend/Dockerfile
    # Pero ejecuta un comando diferente: solo las migraciones
    startCommand: "cd /app && alembic upgrade head"
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: inventory_db_iomh # Asegúrate de que este es el nombre de tu servicio de BD
          property: connectionString
      - key: PYTHONPATH
        value: "/app"

  # Worker de Celery
  - type: worker
    name: hcg-worker
    # Usa la misma imagen de Docker que el backend
    dockerfilePath: ./backend/Dockerfile
    # Comando para iniciar el worker de Celery
    startCommand: "cd /app && celery -A worker.celery_app worker --loglevel=info"
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: inventory_db_iomh # Asegúrate de que este es el nombre de tu servicio de BD
          property: connectionString
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: tu-nombre-de-servicio-redis # <-- Cámbialo por el nombre real
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: tu-nombre-de-servicio-redis # <-- Cámbialo por el nombre real
          property: connectionString
      - key: PYTHONPATH
        value: "/app"

# Etapa de construcción
FROM node:18-alpine AS builder
WORKDIR /app

# Copiar e instalar dependencias
COPY package*.json ./
RUN npm install

# Copiar código fuente
COPY . .

# Argumento para la URL del API
ARG NEXT_PUBLIC_API_URL

# Establecer la variable de entorno para el build
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}

# Construir la aplicación
RUN npm run build

# Etapa de producción
FROM node:18-alpine
WORKDIR /app

# Copiar solo lo necesario
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public

EXPOSE 3000
CMD ["npm", "start"]
