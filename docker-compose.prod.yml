version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: inventory-db-prod
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-inventory_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      POSTGRES_DB: ${POSTGRES_DB:-inventory_db}
    networks:
      - inventory-network-prod

  redis:
    image: redis:7-alpine
    container_name: inventory-redis-prod
    networks:
      - inventory-network-prod

  backend:
    build: ./backend
    container_name: inventory-backend-prod
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-inventory_user}:${POSTGRES_PASSWORD:-secure_password}@db/${POSTGRES_DB:-inventory_db}
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    depends_on:
      - db
      - redis
    networks:
      - inventory-network-prod

  worker:
    build: ./backend
    container_name: inventory-worker-prod
    command: celery -A worker.celery_app worker --loglevel=info
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-inventory_user}:${POSTGRES_PASSWORD:-secure_password}@db/${POSTGRES_DB:-inventory_db}
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    depends_on:
      - backend
    networks:
      - inventory-network-prod

  frontend:
    build: ./frontend
    container_name: inventory-frontend-prod
    depends_on:
      - backend
    networks:
      - inventory-network-prod

  proxy:
    image: nginx:alpine
    container_name: inventory-proxy-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    networks:
      - inventory-network-prod
    depends_on:
      - frontend

  certbot:
    image: certbot/certbot
    container_name: inventory-certbot-prod
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data_prod:

networks:
  inventory-network-prod:
    driver: bridge
